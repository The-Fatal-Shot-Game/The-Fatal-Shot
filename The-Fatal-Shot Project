import pygame
pygame.init()
move_right = [pygame.image.load("hero/R1.png"), pygame.image.load("hero/R2.png"), pygame.image.load("hero/R3.png"), pygame.image.load("hero/R4.png"), pygame.image.load("hero/R5.png"), pygame.image.load("hero/R6.png"), pygame.image.load("hero/R7.png"), pygame.image.load("hero/R8.png"), pygame.image.load("hero/R9.png")]
move_left = [pygame.image.load("hero/L1.png"), pygame.image.load("hero/L2.png"), pygame.image.load("hero/L3.png"), pygame.image.load("hero/L4.png"), pygame.image.load("hero/L5.png"), pygame.image.load("hero/L6.png"), pygame.image.load("hero/L7.png"), pygame.image.load("hero/L8.png"), pygame.image.load("hero/L9.png")]


backgroundImage = pygame.image.load("bg8.png")
hero = pygame.image.load("hero/standing.png")
screenWidth = 1280
screenHeight = 640
clock = pygame.time.Clock()
screen = pygame.display.set_mode((screenWidth, screenHeight))             #window size ... variable
pygame.display.set_caption("The Fatal Shot")      # label of window

# RGB Color
x = 10   # Movement in Horizontal (Default Position)
y = 484   # Movement in vertical   (Default Position)
width = 64 #because size of hero = 64
height = 64
left = False # Status of direction
right = False
moves = 0
step = 6  # step is the magnitude of the Displacement and speed of hero movement
speed = 10 # using for jumping (distance of jumping)
isJumping = False #status of Jumping

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
def redrawGame(): # Replace it with OOP
    #screen.fill(BLACK)  # Clear the Effect of moving of rectangle
    screen.blit(backgroundImage, (0, 0))  # Background and its position
    global moves
    if left:
        screen.blit(move_left[moves // 2], (x, y))
        moves += 1
        if moves == 18: # we have 9 photos for each direction
            moves = 0

    elif right:
        screen.blit(move_right[moves // 2], (x, y))
        moves += 1
        if moves == 18: # we have 9 photos for each direction
            moves = 0
    else:
        screen.blit(hero, (x, y)) #fixed hero


    #pygame.draw.rect(screen, RED, (x, y, width, height))  # Draw rectangle in Window at point(x, y) from (0, 0) ... (0, 0) = most of top-left

    pygame.display.update()  # update the window with new additions
while True:                                     #use while loop to make window stable
    #pygame.time.delay(50)      #after each 50ms, process user input ... The lower you go, the faster the movement speed
    clock.tick(30) #FBS = 50 rather than delay(50)

    for i in pygame.event.get():                   #this is list get all actions that user did during last 100ms ... user action would be stored in pygame event
        if i.type == pygame.QUIT:
            quit()
    keys = pygame.key.get_pressed()                           #It's dectionary recive all actions that user did when pressed on buttons to move rectangle
    # Movement Buttons
    if keys[pygame.K_LEFT] and x - step >= 0:           # x - step >= 0 until not to move outside the window
        x -= step
        right = False
        left = True
    elif keys[pygame.K_RIGHT] and x + step + width <= screenWidth:
        x += step
        right = True
        left = False
    else:
        right = False
        left = False
        moves = 0
    if not isJumping: # During Jumping, he can't move to up or down
        # Don't need vertical movement
        # if keys[pygame.K_UP] and y - step >= 0:
        #     y -= step
        # if keys[pygame.K_DOWN] and y + step + height <= screenHeight:
        #     y += step
        if keys[pygame.K_SPACE]:
            isJumping = True
    else:                       #in case Jumping
        if speed >= -10:
            neg = 1
            if speed < 0:
                neg = -1
            y -= (speed ** 2) * 0.3 * neg
            speed -= 1
        else:
            speed = 10 #reset for next Jump
            isJumping = False

    redrawGame()
