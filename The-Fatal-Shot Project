import pygame
pygame.init()
move_right = [pygame.image.load("hero/R1.png"), pygame.image.load("hero/R2.png"), pygame.image.load("hero/R3.png"), pygame.image.load("hero/R4.png"), pygame.image.load("hero/R5.png"), pygame.image.load("hero/R6.png"), pygame.image.load("hero/R7.png"), pygame.image.load("hero/R8.png"), pygame.image.load("hero/R9.png")]
move_left = [pygame.image.load("hero/L1.png"), pygame.image.load("hero/L2.png"), pygame.image.load("hero/L3.png"), pygame.image.load("hero/L4.png"), pygame.image.load("hero/L5.png"), pygame.image.load("hero/L6.png"), pygame.image.load("hero/L7.png"), pygame.image.load("hero/L8.png"), pygame.image.load("hero/L9.png")]

# these codes are for importing images
move_rightE = [pygame.image.load("enemy/R1E.png"), pygame.image.load("enemy/R2E.png"), pygame.image.load("enemy/R3E.png"), pygame.image.load("enemy/R4E.png"), pygame.image.load("enemy/R5E.png"), pygame.image.load("enemy/R6E.png"), pygame.image.load("enemy/R7E.png"), pygame.image.load("enemy/R8E.png"), pygame.image.load("enemy/R9E.png"), pygame.image.load("enemy/R10E.png"), pygame.image.load("enemy/R11E.png")]
move_leftE = [pygame.image.load("enemy/L1E.png"), pygame.image.load("enemy/L2E.png"), pygame.image.load("enemy/L3E.png"), pygame.image.load("enemy/L4E.png"), pygame.image.load("enemy/L5E.png"), pygame.image.load("enemy/L6E.png"), pygame.image.load("enemy/L7E.png"), pygame.image.load("enemy/L8E.png"), pygame.image.load("enemy/L9E.png"), pygame.image.load("enemy/L10E.png"), pygame.image.load("enemy/L10E.png")]




backgroundImage = pygame.image.load("bg8.png")
hero = pygame.image.load("hero/standing.png")
score = 0
bulletSound = pygame.mixer.Sound("sounds/bullet.wav")
hitSound = pygame.mixer.Sound("sounds/hit.wav")
screenWidth = 1280
screenHeight = 640
clock = pygame.time.Clock()
screen = pygame.display.set_mode((screenWidth, screenHeight))             #window size ... variable
pygame.display.set_caption("The Fatal Shot")      # label of window
# RGB Color
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
TEAL = (152,251,152)
OLIVE = (128,128,0)
YELLOW = (255,255,0)
GREEN = (0, 100, 0)


class Player(): #became easier of want to add more characters
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y

        self.start_x = x #for collision
        self.start_y = y #for collision

        self.width = width
        self.height = height
        self.step = 6
        self.left = False
        self.right = False
        self.moves = 0
        self.speed = 10
        self.isJumping = False
        self.standing = True
        self.hitbox = (self.x + 20, self.y + 10, self.height - 40, self.width - 20)#hitbox is a rectangle with start, end, width and height

    def draw(self, screen): #Display Character
        if not self.standing:
            if self.left:
                screen.blit(move_left[self.moves // 2], (self.x, self.y))
                self.moves += 1
                if self.moves == 18:  # we have 9 photos for each direction
                    self.moves = 0

            elif self.right:
                screen.blit(move_right[self.moves // 2], (self.x, self.y))
                self.moves += 1
                if self.moves == 18:  # we have 9 photos for each direction
                    self.moves = 0
        else:
            if self.right:
                screen.blit(move_right[0], (self.x, self.y))
            else:
                screen.blit(move_left[0], (self.x, self.y))
            #screen.blit(hero, (self.x, self.y))  # fixed hero look at you!
        self.hitbox = (self.x + 20, self.y + 10, self.width - 40, self.height - 20)
        #pygame.draw.rect(screen, TEAL, self.hitbox, 2) #width = 2 ...  # width = 2 # We no longer need to show it
    def hit(self):
        self.x = self.start_x
        self.y = self.start_y
        self.moves = 0
        font1 = pygame.font.SysFont("segoeui", 95)
        text = font1.render("-6", 1, RED)
        screen.blit(text, (screenWidth // 2 - 2, 200))
        pygame.display.update()
        #make small mainloop
        i = 0
        while i < 200:
            i += 1
            pygame.time.delay(20)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    quit()

class Bullet: #The bullet is a circle
    def __init__(self, x, y, radius, color, direction, step):
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color
        self.direction = direction #-1 to left and 1 to right
        self.step = step * direction

    def draw(self, screen):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius)

class Enemy:#enemy will move to left and right automatically from (x) to (end)
    def __init__(self, x, y, width, height, end):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.end = end
        self.start = x #because we will modify the value of (x)
        self.step = 3
        self.moves = 0
        self.hitbox = (self.x + 20, self.y + 10, self.height - 40,self.width - 20)  # hitbox is a rectangle with start, end, width and height
        self.health = 10
        self.visible = True #status of enemy


    def draw(self, screen):
        if self.visible:
            self.move()
            if self.step < 0:
                screen.blit(move_leftE[self.moves // 2], (self.x, self.y))
                self.moves += 1
                if self.moves == 11 * 2:  # we have 11 photos for each direction
                    self.moves = 0

            else:
                screen.blit(move_rightE[self.moves // 2], (self.x, self.y))
                self.moves += 1
                if self.moves == 11 * 2:  # we have 11 photos for each direction
                    self.moves = 0

            pygame.draw.rect(screen, RED, (self.hitbox[0] - 15, self.hitbox[1] - 17, 60, 15))   #ractangle above the enemy represented as health bar
            pygame.draw.rect(screen, YELLOW, (self.hitbox[0] - 15, self.hitbox[1] - 17, self.health * 6, 15))

    def move(self): #The same as hero
        if self.step > 0:
            if self.x + self.step > self.end:  # Would be outside the screen if moved to right?
                self.step *= -1  # if true change the direction
            else:
                self.x += self.step
        else:
            if self.x - self.step < self.start:  # Would be outside the screen if moved to left?
                self.step *= -1
            else:
                self.x += self.step
        self.hitbox = (self.x + 20, self.y + 10, self.width - 40, self.height - 20)

        #pygame.draw.rect(screen, GREEN, self.hitbox, 2)  # width = 2 # We no longer need to show it
    def hit(self):
        hitSound.play()
        self.health -= 1
        if self.health == 0:
            self.visible = False
            self.hitbox = (0, 0, 0, 0)
        print("hit")


man = Player(1200, 484, 64, 64)
enemy = Enemy(10, 484, 64, 64, 1000)
# x = 10   # Movement in Horizontal (Default Position)
# y = 484   # Movement in vertical   (Default Position)
# width = 64 #because size of hero = 64
# height = 64
# Used in Player() Class
# left = False # Status of direction
# right = False
# moves = 0
# step = 6  # step is the magnitude of the Displacement and speed of hero movement
# speed = 10 # using for jumping (distance of jumping)
# isJumping = False #status of Jumping

font = pygame.font.SysFont("segoeui", 60, True)#the font that show the score om screen

def redrawGame():# Display every thing
    global moves

    text = font.render("Score = " + str(score), True, OLIVE) #Change the color


    #screen.fill(BLACK)  # Clear the Effect of moving of rectangle
    screen.blit(backgroundImage, (0, 0))  # Background and its position

    screen.blit(text, (480, 0)) #show scoring

    enemy.draw(screen) #Display enemy
    man.draw(screen)  # Display hero
    for bullet in bullets: #Display many of bullets
        bullet.draw(screen)

    #pygame.draw.rect(screen, RED, (x, y, width, height))  # Draw rectangle in Window at point(x, y) from (0, 0) ... (0, 0) = most of top-left

    pygame.display.update()  # update the window with new additions


bullets = []#to be able to hit more than one bullet ... it is empty and filled with Bullet object
#main loop
while True:                                     #use while loop to make window stable
    #pygame.time.delay(50)      #after each 50ms, process user input ... The lower you go, the faster the movement speed
    clock.tick(30) #FBS = 50 rather than delay(50)

    x_mid = (2 * man.hitbox[0] + man.hitbox[2]) // 2
    y_mid = (2 * man.hitbox[1] + man.hitbox[3]) // 2

    if x_mid > enemy.hitbox[0] and x_mid < enemy.hitbox[0] + enemy.hitbox[2]:  # hitting ... if bullet inside the hitbox of enemy () ... hitbox[2] = width
        if y_mid > enemy.hitbox[1]:  # Is the bullet under the The enemy's top line?
            score -= 6
            man.hit()



    for event in pygame.event.get():                   #this is list get all actions that user did during last 100ms ... user action would be stored in pygame event
        if event.type == pygame.QUIT:
            quit()
        if event.type == pygame.KEYDOWN: #K_DOWN => when u press on some button
            if event.key ==  pygame.K_z:  # hit bullets
                if len(bullets) < 5:  # make limit of Bullets

                    bulletSound.play()

                    direction = 1
                    if man.left:
                        direction = -1
                    else:
                        direction = 1
                    bullets.append(
                        Bullet(round(man.x + man.width // 2), round(man.y + man.height // 2), 5, RED, direction, 10))

    keys = pygame.key.get_pressed()                           #It's dectionary recive all actions that user did when pressed on buttons to move rectangle

    # Movement Buttons

    for bullet in bullets:
        if bullet.x > enemy.hitbox[0] and bullet.x < enemy.hitbox[0] + enemy.hitbox[2]:    #hitting ... if bullet inside the hitbox of enemy () ... hitbox[2] = width
            if bullet.y > enemy.hitbox[1]: # Is the bullet under the The enemy's top line?
                bullets.remove(bullet) #Because bullet hit the enemy ... remove = hide it
                enemy.hit()
                score += 1


        if bullet.x < screenWidth and bullet.x > 0: #inside the screen
            bullet.x += bullet.step
        else:
            bullets.remove(bullet)

    #make it in event to shoot one bullet for each pressing on (z)
    # if keys[pygame.K_z]: #hit bullets
    #     if len(bullets) < 5: #make limit of Bullets
    #         direction = 1
    #         if man.left:
    #             direction = -1
    #         else:
    #             direction = 1
    #         bullets.append(Bullet(round(man.x + man.width // 2), round(man.y + man.height // 2), 5, RED, direction, 10))


    if keys[pygame.K_LEFT] and man.x - man.step >= 0:           # x - step >= 0 until not to move outside the window
        man.x -= man.step
        man.right = False
        man.left = True
        man.standing = False
    elif keys[pygame.K_RIGHT] and man.x + man.step + man.width <= screenWidth:
        man.x += man.step
        man.right = True
        man.left = False
        man.standing = False
    else:
        man.standing = True
        man.moves = 0
    if not man.isJumping: # During Jumping, he can't move to up or down
        # Don't need vertical movement
        # if keys[pygame.K_UP] and y - step >= 0:
        #     y -= step
        # if keys[pygame.K_DOWN] and y + step + height <= screenHeight:
        #     y += step
        if keys[pygame.K_SPACE]:
            man.isJumping = True
    else:                       #in case Jumping
        if man.speed >= -10:
            neg = 1
            if man.speed < 0:
                neg = -1
            man.y -= (man.speed ** 2) * 0.3 * neg
            man.speed -= 1
        else:
            man.speed = 10 #reset for next Jump
            man.isJumping = False

    redrawGame()
